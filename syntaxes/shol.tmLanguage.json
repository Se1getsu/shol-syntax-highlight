{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Shol",
	"patterns": [
		{
			"include": "#block-comments"
		},
		{
			"include": "#comments"
		},
		{
			"include": "#colony_declarations"
		},
		{
			"include": "#statements"
		}
	],
	"repository": {
		"comments": {
			"patterns": [
				{
                    "name": "comment.line.double-slash.shol",
                    "match": "(//).*$",
                    "captures": {
                        "1": {
                            "name": "punctuation.definition.comment.shol"
                        }
                    }
				}
			]
		},
		"block-comments": {
            "patterns": [
                {
                    "name": "comment.block.shol",
                    "begin": "/\\*",
                    "end": "\\*/",
					"patterns": [
						{
							"include": "#block-comments"
						}
					]
                }
            ]
        },
		"colony_declarations": {
			"patterns": [
				{
					"comment": "Colony Declaration",
					"match": "^([\\*%])([\\p{XID_Start}_]\\p{XID_Continue}*)?",
					"captures": {
						"1": {"name": "storage.type.class.shol"},
						"2": {"name": "entity.name.type.class.shol"}
					}
				}
		]
		},
		"statements": {
			"patterns": [
				{
					"comment": "Rule",
					"begin": "^([\\.\\|])",
					"end": "$",
					"beginCaptures": {
						"1": {"name": "keyword.control.shol"}
					},
					"patterns": [
						{
							"include": "#block-comments"
						},
						{
							"include": "#comments"
						},
						{
							"include": "#capts"
						},
						{
							"include": "#destinations"
						},
						{
							"include": "#commas"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#strings"
						},
						{
							"include": "#operators"
						}
					]
				},
				{
					"comment": "Macro",
					"begin": "^(@debug|@sleep)\\b",
					"end": "$",
					"beginCaptures": {
						"1": {"name": "keyword.control.shol"}
					},
					"patterns": [
						{
							"include": "#block-comments"
						},
						{
							"include": "#comments"
						},
						{
							"include": "#constants"
						},
						{
							"include": "#strings"
						}
					]
				}
			]
		},
		"commas": {
			"patterns": [
				{
					"name": "punctuation.separator.shol",
					"match": ","
				}
			]
		},
		"destinations": {
			"patterns": [
				{
					"match": "(#)([\\p{XID_Start}_]\\p{XID_Continue}*)?",
					"captures": {
						"1": {"name": "keyword.control.shol"},
						"2": {"name": "entity.name.type.class.shol"}
					}
				}
			]
		},
		"capts": {
			"patterns": [
				{
					"name": "variable.other.shol",
					"match": "\\$([\\p{XID_Start}_]\\p{XID_Continue}*)?"
				}
			]
		},
		"constants": {
			"patterns": [
				{
					"comment": "Int Literal",
					"name": "constant.numeric.shol",
					"match": "(?x) 0 | [1-9]\\d*"
				},
				{
					"comment": "Double Literal",
					"name": "constant.numeric.shol",
					"match": "(?x) (?:\\d+\\. | \\d*\\.\\d+) (?:[eE] [+-]? \\d+)?"
				},
				{
					"comment": "Double Literal",
					"name": "constant.numeric.shol",
					"match": "(?x) \\d+ (?:[eE] [+-]? \\d+)"
				},
				{
					"comment": "Boolean Literal",
					"name": "constant.language.boolean.shol",
					"match": "(true|false)"
				},
				{
					"comment": "Symbol Literal",
					"name": "constant.language.symbol.shol",
					"match": "(')([\\p{XID_Start}_]\\p{XID_Continue}*)?",
					"captures": {
						"1": {"name": "punctuation.definition.constant.shol"}
					}
				}
			]
		},
		"strings": {
			"patterns": [
				{
					"name": "string.quoted.double.shol",
					"begin": "\"",
					"end": "\"",
					"patterns": [
						{
							"name": "constant.character.escape.shol",
							"match": "\\\\."
						}
					]
				},
				{
					"name": "string.nonquoted.shol",
					"match": "(\\p{XID_Start}|_)\\p{XID_Continue}*"
				}
			]
		},
		"operators": {
			"patterns": [
				{
					"name": "keyword.operator.arithmetic.shol",
					"match": "\\+|\\-|\\*|\\/|\\%"
				},
				{
					"name": "keyword.operator.bitwise.shol",
					"match": "~|<<|>>|\\^|\\|"
				},
				{
					"name": "keyword.operator.logical.shol",
					"match": "!|&&|\\|\\|"
				},
				{
					"name": "keyword.operator.comparison.shol",
					"match": "=|!=|<|>|<=|>="
				},
				{
					"comment": "Type Hint Operator",
					"name": "entity.name.type",
					"match": ":(i(nt)?|d(ouble)?|s(tr)?|b(ool)?|sym(bol)?)"
				},
				{
					"comment": "Type Conversion Operator",
					"name": "entity.name.function",
					"match": ".(i(nt)?|d(ouble)?|s(tr)?)"
				},
				{
					"comment": "Utility Operator",
					"name": "entity.name.function",
					"match": ".(ceil|floor|round|abs|ord|chr|len)"
				},
				{
					"comment": "Slice Operation Separator",
					"name": "punctuation.separator.colon.shol",
					"match": ":"
				}
			]
		}
	},
	"scopeName": "source.shol"
}